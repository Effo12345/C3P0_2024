#include <autonomous.hpp>
#include <FEHRCS.h>

void fuelLever(int leverNum) {
     if(leverNum == 0) {
        // Route for first lever
        chassis->followNewPath({
            {11.58859813084112, -29.896364380693885},
        {10.266913266546775, -28.497360179806098},
        {8.944535424856145, -27.11386927209478},
        {7.622916955589662, -25.763808764422937},
        {6.302399836404445, -24.47032254768469},
        {4.983911980641801, -23.2653824058891},
        {3.668076467651955, -22.19478340935827},
        {2.356615236535507, -21.32523849096793},
        {0.973895410759428, -20.66703906564807},
        {-0.3842953603342144, -20.136837234488848},
        {-1.8158879479422083, -19.658881954011463},
        {-3.2379906542056074, -19.21308283863781}
        },{
            161.63000373135807,
        151.80549085487368,
        141.36048009474646,
        130.23038946615566,
        118.33169080085999,
        105.56783290761382,
        91.81724461208353,
        76.89432306936332,
        84.4523229816461,
        69.27753759420084,
        48.83179095911195,
        0
        }, true);
    }
    else if(leverNum == 1) {
        // Route for second lever (primary points only)
        chassis->followNewPath({
            {11.673808411214953, -29.81224405359108},
        {10.33139723813269, -28.42495695723313},
        {8.988443292610098, -27.052095001223623},
        {7.646086463975748, -25.710374963857596},
        {6.304990163107614, -24.42141259328208},
        {4.965711146658906, -23.214848799732273},
        {3.62925311780737, -22.13334343494895},
        {2.297132010791928, -21.239059149219774},
        {0.9714293221868558, -20.623334769620524},
        {-0.5087020320321503, -20.24079794124685},
        {-2.0628885196009303, -20.010055253890137},
        {-3.6223373314545864, -19.873352565520335},
        {-5.118939126055639, -19.787647104545457},
        {-6.475981308411215, -19.71780480125463}
        },{
            158.3636221288232,
        148.29132966445965,
        137.54103823516468,
        126.01924768964903,
        113.59883160706651,
        100.10240345758838,
        85.26261128505641,
        68.57534042217011,
        57.58962972100383,
        97.93502281878739,
        84.1267726413404,
        67.62120479710514,
        46.627687321353854,
        0
        }, true);
    }
    else {
        // Route for third lever
        chassis->followNewPath({
            {11.247757009345793, -29.55988307228267},
        {9.966767357275172, -28.118544574948288},
        {8.683947526723635, -26.69256788339238},
        {7.399180220753813, -25.299708123884095},
        {6.111111120830787, -23.962973366294214},
        {4.817838055658687, -22.714063177160433},
        {3.5168664812047545, -21.598426203435764},
        {2.2042276739686524, -20.682232737128547},
        {0.8742754975930828, -20.06277793109919},
        {-0.6385337698566838, -19.694078523013197},
        {-2.259292356690624, -19.492656273401},
        {-3.9298483692335546, -19.401111048041567},
        {-5.599933801433182, -19.379189574168542},
        {-7.218977181556223, -19.397549983008048},
        {-8.728747512590846, -19.433088518661577},
        {-10.05481308411215, -19.46544381994622}
        }, {
            155.45633213501722,
        145.19425039695312,
        134.2104322114513,
        122.39519398161862,
        109.59218296796354,
        95.57121239760487,
        79.94840514685785,
        61.891293579903156,
        53.83814099162893,
        96.76797529174195,
        111.70738919090044,
        99.00323681607387,
        84.43502843103929,
        67.36941482256121,
        46.06882223703974,
        0
        }, true);
    }

    if(leverNum == 0 || leverNum == 1) {
        // Align with lever
        chassis->turn(89.0f);

        float flipDownTime = TimeNow();
        // Actuate lever, then move arm up
        fuelArm.SetDegree(100);
        Sleep(1000);
        fuelArm.SetDegree(0);

        // Disengage from lever
        chassis->driveFor(-15.0f, 0.5f);

        // Put arm under lever
        fuelArm.SetDegree(150);
        Sleep(500);

        // Realign with lever
        chassis->driveFor(15.0f, 0.5f);

        // Wait until 5 seconds elapsed, then unflip lever
        Sleep(5.25f - (TimeNow() - flipDownTime));
        fuelArm.SetDegree(85);
        Sleep(300);

        // Get arm out of the way
        fuelArm.SetDegree(155);
        Sleep(100);

        // Line up with wall
        chassis->followNewPath({
            {-4.601355140186915, -18.203638913404163},
        {-6.4230621499102, -18.181695106658704},
        {-8.217509861687144, -18.160091517276534},
        {-9.953121070065357, -18.139196268210867},
        {-11.58859813084112, -18.11951858630136}
        }, {
            105.73740560592921,
        90.91455479127067,
        73.44475386882962,
        51.15615990516402,
        0
        }, true);
    }
    else { // Lever 3 (same as above)
        chassis->turn(89.0f);

        float flipDownTime = TimeNow();
        fuelArm.SetDegree(100);
        Sleep(1000);
        fuelArm.SetDegree(0);

        float startLeverFlip = TimeNow();

        chassis->driveFor(15.0f, 0.6f);

        fuelArm.SetDegree(150);
        Sleep(500);

        chassis->driveFor(-25.0f, 0.5f);

        Sleep(5.25f - (TimeNow() - flipDownTime));
        fuelArm.SetDegree(75);

        // Get arm out of the way of the levers
        Sleep(500);
        fuelArm.SetDegree(155);
        Sleep(50);
    }

    // Hard reset against wall
    chassis->getOdomModel()->setPos({{-10.65, FLT_MAX}, 90.0f});
}

void ramp() {
    // Drive to ramp
    chassis->followNewPath({
        {-15.678691588785046, -18.876601530226594},
        {-13.698875021554342, -18.91246736276308},
        {-11.723332954377499, -18.94674302094277},
        {-9.75483576731978, -18.977598455301877},
        {-7.798146692646822, -19.002639117755947},
        {-5.859893660084502, -19.018550259096155},
        {-3.949625325465347, -19.020607044902118},
        {-2.081347131721959, -19.00194331974281},
        {-0.27543279638341617, -18.952449431855445},
        {1.4377451762396969, -18.85722485961777},
        {3.0136764265968363, -18.69417877902899},
        {4.660870975296372, -18.437013059988615},
        {6.333978499053926, -18.123206567510323},
        {7.991881695821776, -17.78136826702066},
        {9.590901805421051, -17.435768419154662},
        {11.07733644859813, -17.110074661067713}
    }, {
        200,
        199.77984783219568,
        191.70457631988856,
        183.3048340574516,
        174.55573125572857,
        165.43395652673476,
        155.92293886746268,
        146.0224934771889,
        135.76457823357225,
        125.24657629574028,
        114.68110470603713,
        102.3929596813491,
        88.09464980603535,
        71.07899099599119,
        49.342847238108895,
        0
    });

    // Get servo out of the way, and face up the ramp
    fuelArm.SetDegree(0.0f);

    chassis->turn(0.0f);
    // gui->pause();

    // Facing exactly straight up the ramp
    chassis->getOdomModel()->setPos({{FLT_MAX, FLT_MAX}, 0.0f});

    passportArm.SetDegree(60.0f);

    // Drive to the top of the ramp
    chassis->resetSettled();
    chassis->drive(80.0f, 80.0f);
    while(chassis->getOdomModel()->getPos().p.y < 6.0f) {
        chassis->getOdomModel()->step();
        gui->setPos(chassis->getOdomModel()->getPos());
        Sleep(10);
    }
    chassis->drive(0.0f, 0.0f);
    chassis->awaitSettled();

    // gui->pause();
    chassis->getOdomModel()->setPos({{FLT_MAX, 7.45f}, 0.0f});

    chassis->followNewPath({
        {11.58859813084112, 8.210143796876213},
        {9.908909095269006, 8.328215052310563},
        {8.276037247860241, 8.426572588816413},
        {6.6575734911592575, 8.493105880490905},
        {5.1126168224299064, 8.546625105287427}
 
    }, {
        101.8656318869715,
        87.64971745112294,
        71.16981508828188,
        49.73342340319443,
        0
    });

    chassis->turn(-90.0f);

    chassis->followNewPath({
        {5.368247663551402, 9.808430011829484},
        {7.235783292549825, 9.710110800324106},
        {9.083808352375556, 9.630527741923283},
        {10.912859039968062, 9.588889371552826},
        {12.696533079046882, 9.56853366153956},
        {14.40053738317757, 9.556069030521073}
    }, {
        127.54216537956731,
        113.58162041028064,
        97.83279807424042,
        79.23453882918676,
        55.383118422308534,
        0
    }, true);

    

    // Hard reset at top of ramp
    chassis->getOdomModel()->setPos({{10.75f, FLT_MAX}, -90.0f});
}

void light() {
    // Drive to light
    chassis->followNewPath({
        {15.082219626168223, 10.565512955754718},
        {13.189881998941482, 10.631378465179587},
        {11.312708791039574, 10.723305740663097},
        {9.47061945067299, 10.871231160446083},
        {7.6878261168763515, 11.114028476241447},
        {5.997693391943364, 11.505469551066815},
        {4.448445460169228, 12.122160066784586},
        {3.061329651523571, 13.073694086489732},
        {1.785361334620586, 14.244005816136822},
        {0.5869853808890039, 15.551051515870762},
        {-0.5553027706516368, 16.934142531498956},
        {-1.6542879955545373, 18.344530183437303},
        {-2.7159847887071553, 19.737670359027838},
        {-3.740559197228263, 21.06638077709843},
        {-4.722404536428873, 22.273336518402942},
        {-5.749897319136112, 23.443235175974305},
        {-6.755416270645379, 24.545491925803862},
        {-7.66892523364486, 25.538931180053783}

    }, {
        159.8216652354333,
        150.04463001329307,
        139.6650084826305,
        128.64479713292258,
        116.9216956773397,
        104.37859234128608,
        90.70241933951262,
        145.8314641493267,
        153.5658812030609,
        144.03212760360614,
        133.69799519331326,
        122.5330401592603,
        110.50707974061298,
        97.60755065970997,
        83.89175179494052,
        67.42808192768226,
        46.46891445142048,
        0
    });

    // Sample light color using cds cell
    cds->sampleLight();
}

void luggage() {
    // Drive to luggage
    chassis->followNewPath({
        {-8.265397196261683, 26.127773469773413},
        {-7.032442914268594, 25.092580771023048},
        {-5.8873234400219525, 24.035666620578812},
        {-4.929383323748407, 22.931939708767814},
        {-4.288106537731942, 21.74896475515664},
        {-3.8906245840527105, 20.3158869614441},
        {-3.6564769237439267, 18.72059368415104},
        {-3.5307262004470923, 17.025753523874467},
        {-3.475314712719781, 15.278336142473648},
        {-3.463191126420986, 13.517357851373198},
        {-3.4739621066411273, 11.77947287981521},
        {-3.4951325119215957, 10.034108873408975},
        {-3.5219851993627582, 8.320935936485583},
        {-3.5507296585664285, 6.6846539879045395},
        {-3.5788317757009342, 5.181812021175278}
    }, {
        115.58398668696262,
        103.84511042481523,
        91.05214131932996,
        77.15023048745088,
        75.0848281928969,
        148.34638683203488,
        147.21547651506478,
        137.67061535272202,
        127.10596041707171,
        115.49152841654609,
        102.75029818602846,
        88.11830652796598,
        70.87610704982204,
        49.040468006775114,
        0
    }, true);
}

void button() {
    if(cds->getColor() == RED) {
        // Press red button (primary points only)
        chassis->followNewPath({
            {-3.749252336448598, 2.7423225351939693},
        {-2.8285117423109103, 4.298271342225558},
        {-1.9191613022755363, 5.825525641775824},
        {-1.032140030961459, 7.290891577531487},
        {-0.18291388078984938, 8.651372686775852},
        {0.6071315784387331, 9.84796234448363},
        {1.4518502396016808, 11.050578755571106},
        {2.2223825299038786, 12.27551159962376},
        {2.778219669192514, 13.54235645473094},
        {3.1690278934067977, 15.02432394988846},
        {3.437555802248474, 16.641138654588634},
        {3.6073604933677337, 18.333518023047397},
        {3.6883851025721737, 20.082978032966626},
        {3.7112269340719126, 21.850905851099814},
        {3.697386288223425, 23.601498334549625},
        {3.6627292015030113, 25.296440335567315},
        {3.6198017616850295, 26.88862230715737},
        {3.5788317757009342, 28.314901974446308}
        }, {
            176.26619589179018,
        167.86014033152492,
        159.1636383330728,
        150.30764285627154,
        141.51447867458128,
        133.16210815815865,
        124.0190559969825,
        114.30363458139563,
        112.0764642105164,
        146.01272037561827,
        136.7383451107962,
        126.39609289183146,
        114.77733150405919,
        101.70995640915257,
        86.85551058144246,
        69.5083135982837,
        47.780631705360555,
        0
        });
    }
    else {
        // Press blue button (default)
        chassis->followNewPath({
            {-3.0675700934579435, 0.891675338932287},
        {-3.091694027589364, 2.8015868503728854},
        {-3.1054396347834574, 4.697859792135125},
        {-3.0946971768349143, 6.564600592805611},
        {-3.0425205202817778, 8.381377021836236},
        {-2.9254743099693425, 10.12006866144757},
        {-2.7100232296402407, 11.740191882866965},
        {-2.3591289743495376, 13.425527586040582},
        {-1.9468121307413822, 15.1546999119488},
        {-1.5374893784399923, 16.913226146769478},
        {-1.1960091592351123, 18.69124334208409},
        {-0.9881595254150563, 20.503368343614685},
        {-0.8688470246274554, 22.320510615404196},
        {-0.8068131249255397, 24.114380259546834},
        {-0.7797465702544012, 25.853054738170695},
        {-0.7707848062601355, 27.496061414081172},
        {-0.7668925233644859, 28.98786459126874}
        }, {
            200,
        200,
        200,
        197.95035201004194,
        190.25642466125763,
        182.4540114696618,
        174.64610873968638,
        166.9917521759013,
        158.53038202633127,
        149.29045803386626,
        139.27951583652091,
        128.45997139186906,
        116.54850657706783,
        103.29504489254823,
        88.30605428547433,
        70.82191041238904,
        48.85584108180569,
        0
        });
    }
}

void passport() {
    // Try to press the top button (NOT FUNCTIONAL)
    // highButton.SetDegree(70);
    // Sleep(1000);
    // highButton.SetDegree(0);

    // Go to passport lever
    // fuelArm.SetDegree(170);
    passportArm.SetDegree(180);

    chassis->followNewPath({
        {1.7042056074766354, 26.54837510528743},
        {1.7138533186656226, 24.75072013987888},
        {1.7493848384486137, 22.98352299149517},
        {1.8427746419084852, 21.2821941030158},
        {2.034001051127976, 19.692090436742173},
        {2.3782248595118887, 18.276441300312822},
        {2.9338867460299283, 16.869539725617276},
        {3.5924885774555477, 15.495203387834},
        {4.260514018691588, 14.18268702117528} 
    }, {
        138.15416547707366,
        127.31961385505159,
        115.68144696130223,
        103.22777209442295,
        89.96374572676665,
        75.91072616504478,
        69.24428267493394,
        48.54256681023742,
        0
    }, true);

    chassis->turn(0.0f);

    chassis->followNewPath({
        {4.856985981308411, 14.603288656689298},
        {4.904900411160484, 16.455861922583583},
        {4.951236860963787, 18.285611711992114},
        {4.996329192098817, 20.066233312233454},
        {5.039308534097578, 21.763416465128785},
        {5.078970389130134, 23.329597542907365},
        {5.1126168224299064, 24.697727909025748}
    }, {
        127.10736347936692,
        114.85283363851997,
        101.30466497406238,
        86.09719623553629,
        68.5300194803155,
        46.79391476652772,
        0
    });

    // chassis->turn(-3.0f);

    // passportArm.SetDegree(90);
    // Sleep(1000);
    // passportArm.SetDegree(0);
    // Sleep(500);
    // passportArm.SetDegree(180);
    // chassis->driveFor(15.0f, 0.2f);
    // passportArm.SetDegree(90);
    // Sleep(100);

    chassis->turn(0.0f);
    passportArm.SetDegree(55);
    Sleep(500);
    passportArm.SetDegree(180);

    chassis->driveFor(25.0f, 0.15f);
    fuelArm.SetDegree(40.0f);

    chassis->driveFor(-25.0f, 0.5f);
    fuelArm.SetDegree(0.0f);
    passportArm.SetDegree(60.0f);

    // chassis->turn(0.0f);

    // Move passport lever up
    // chassis->driveFor(25.0f, 0.8f);
    // fuelArm.SetDegree(30.0f);
    // Sleep(1000);

    // fuelArm.SetDegree(170);

    // chassis->driveFor(15.0f, 1.7f);

    // fuelArm.SetDegree(20.0f);
    // chassis->driveFor(25.0f, 0.5f);

    // fuelArm.SetDegree(20.0f);

    // Move passport lever down
    // chassis->driveFor(-15.0f, 0.75f);
    // fuelArm.SetDegree(0.0f);
    // Sleep(500);

    // chassis->driveFor(15.0f, 1.25f);
    
    // fuelArm.SetDegree(20.0f);
    // Sleep(500);

    // chassis->driveFor(-15.0f, 1.0f);
    
    // fuelArm.SetDegree(0.0f);

    // gui->pause();
}

void finalButton() {
    // Path to final button
    chassis->followNewPath({
        {4.77177570093458, 19.902869264165933},
        {4.596914145805516, 18.108259972468005},
        {4.45096600644941, 16.34040584928528},
        {4.369525649986272, 14.630208098820736},
        {4.397286381460109, 13.017569204897317},
        {4.595987129757477, 11.557614900061877},
        {5.053980256423566, 10.329305270874837},
        {5.875008270214654, 9.313568551380808},
        {6.880393977684779, 8.409274321589017},
        {7.9202263937189805, 7.5326973113053795},
        {8.8500039017132, 6.604410153854032},
        {9.50802028732488, 5.536939383356969},
        {9.960853940112422, 4.17041844695571},
        {10.273779735654175, 2.6036541365740766},
        {10.490242043088706, 0.9042192041677087},
        {10.638635862521594, -0.881019719113937},
        {10.736736155174334, -2.7185903489563565},
        {10.794463615866853, -4.583185664115644},
        {10.81542823151085, -6.453715613517845},
        {10.797496841744652, -8.310020330138695},
        {10.7324689709342, -10.129720861019338},
        {10.604797303045522, -11.884731916031583},
        {10.38917179966408, -13.53685576322402},
        {10.04653665531887, -15.03185562020715},
        {9.518040287420943, -16.29095374640133},
        {8.719433204967364, -17.40908119013948},
        {7.821484605331207, -18.45993007961954},
        {6.979467437681951, -19.50670647942744},
        {6.357373808225805, -20.611953983661586},
        {6.049070615780366, -21.883005831546466},
        {6.040824363936452, -23.20800153096093},
        {6.365707042451085, -24.483487355256724},
        {7.098783471307122, -25.688773962865323},
        {8.092462911944484, -26.842319866920054},
        {9.239813751590265, -27.95449994497849},
        {10.457892876812629, -29.029238171614935},
        {11.673808411214953, -30.064605034899493}

    }, {
        133.7579297157486,
        122.49983954920673,
        110.30875426614445,
        97.10099919132126,
        82.75264063983906,
        67.01147119533015,
        48.91902250015384,
        101.02256827241156,
        92.81213982749881,
        80.23758801107614,
        65.84762451219581,
        69.49004515469606,
        147.6831786755734,
        189.6621411725221,
        182.29279597932225,
        174.2539246714431,
        165.59024881215552,
        156.31810053951617,
        146.4319386901591,
        135.91205448887854,
        124.73454716878214,
        112.88608947163492,
        100.38651486868105,
        87.3122812072922,
        73.74691418737083,
        97.95106564654083,
        85.92335438503471,
        72.34208156720594,
        56.60481041498328,
        68.5451044294965,
        62.33470443935606,
        55.389134618114,
        100.73238371358589,
        87.81219286815602,
        71.79348254041557,
        50.549115607517344,
        0
    }, true);

    // In case the we miss, turn then back up into final button
    chassis->turn(-45.0f);
    chassis->driveFor(-50.0f, 2.0f);
}

/**
 * Final route for the in-class performance test
*/
void showcase() {
    // Fetch lever from RCS and give to GUI
    int leverNum = RCS.GetCorrectLever();
    gui->setLeverNum(leverNum);

    // Set initial states for servos and press starting button
    fuelArm.SetDegree(0.0f);
    passportArm.SetDegree(148);

    chassis->driveFor(25.0f, 0.2f);

    
    fuelLever(leverNum);
    ramp();
    light();
    luggage();
    button();
    passport();
    finalButton();
}